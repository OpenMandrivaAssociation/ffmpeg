diff -up ffmpeg-5.1/libavcodec/cabac.c.flto_inline_asm~ ffmpeg-5.1/libavcodec/cabac.c
--- ffmpeg-5.1/libavcodec/cabac.c.flto_inline_asm~	2022-08-09 16:19:59.546808285 +0200
+++ ffmpeg-5.1/libavcodec/cabac.c	2022-08-09 16:21:59.096771559 +0200
@@ -29,7 +29,7 @@
 
 #include "cabac.h"
 
-DECLARE_ASM_ALIGNED(1, const uint8_t, ff_h264_cabac_tables)[512 + 4*2*64 + 4*64 + 63] = {
+__attribute__((used)) __attribute__((visibility("protected"))) DECLARE_ASM_ALIGNED(1, const uint8_t, ff_h264_cabac_tables)[512 + 4*2*64 + 4*64 + 63] = {
     9,8,7,7,6,6,6,6,5,5,5,5,5,5,5,5,
     4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
     3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
diff -up ffmpeg-5.1/libavcodec/x86/lpc.c.flto_inline_asm~ ffmpeg-5.1/libavcodec/x86/lpc.c
--- ffmpeg-5.1/libavcodec/x86/lpc.c.flto_inline_asm~	2022-07-22 19:58:39.000000000 +0200
+++ ffmpeg-5.1/libavcodec/x86/lpc.c	2022-08-09 16:19:59.547808260 +0200
@@ -26,8 +26,8 @@
 #include "libavutil/x86/cpu.h"
 #include "libavcodec/lpc.h"
 
-DECLARE_ASM_CONST(16, double, pd_1)[2] = { 1.0, 1.0 };
-DECLARE_ASM_CONST(16, double, pd_2)[2] = { 2.0, 2.0 };
+DECLARE_ASM_CONST_VISIBLE(16, double, pd_1)[2] = { 1.0, 1.0 };
+DECLARE_ASM_CONST_VISIBLE(16, double, pd_2)[2] = { 2.0, 2.0 };
 
 #if HAVE_SSE2_INLINE
 
diff -up ffmpeg-5.1/libavutil/mem.h.flto_inline_asm~ ffmpeg-5.1/libavutil/mem.h
--- ffmpeg-5.1/libavutil/mem.h.flto_inline_asm~	2022-07-22 19:58:39.000000000 +0200
+++ ffmpeg-5.1/libavutil/mem.h	2022-08-09 16:19:59.547808260 +0200
@@ -108,14 +108,16 @@
     #define DECLARE_ALIGNED(n,t,v)      t __attribute__ ((aligned (n))) v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t __attribute__ ((aligned (n))) v
     #define DECLARE_ASM_CONST(n,t,v)    const t __attribute__ ((aligned (n))) v
+    #define DECLARE_ASM_CONST_VISIBLE(n,t,v)   __attribute__ ((externally_visible)) DECLARE_ASM_CONST(n,t,v)
 #elif defined(__DJGPP__)
     #define DECLARE_ALIGNED(n,t,v)      t __attribute__ ((aligned (FFMIN(n, 16)))) v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t av_used __attribute__ ((aligned (FFMIN(n, 16)))) v
     #define DECLARE_ASM_CONST(n,t,v)    static const t av_used __attribute__ ((aligned (FFMIN(n, 16)))) v
 #elif defined(__GNUC__) || defined(__clang__)
-    #define DECLARE_ALIGNED(n,t,v)      t __attribute__ ((aligned (n))) v
+    #define DECLARE_ALIGNED(n,t,v)      t __attribute__ ((aligned (n))) __attribute__((used)) __attribute__((visibility("default"))) v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t av_used __attribute__ ((aligned (n))) v
     #define DECLARE_ASM_CONST(n,t,v)    static const t av_used __attribute__ ((aligned (n))) v
+    #define DECLARE_ASM_CONST_VISIBLE(n,t,v)    __attribute__ ((externally_visible)) const t av_used __attribute__ ((aligned (n))) v
 #elif defined(_MSC_VER)
     #define DECLARE_ALIGNED(n,t,v)      __declspec(align(n)) t v
     #define DECLARE_ASM_ALIGNED(n,t,v)  __declspec(align(n)) t v
@@ -124,6 +126,7 @@
     #define DECLARE_ALIGNED(n,t,v)      t v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t v
     #define DECLARE_ASM_CONST(n,t,v)    static const t v
+    #define DECLARE_ASM_CONST_VISIBLE(n,t,v)    __attribute__((externally_visible)) const t v
 #endif
 
 /**
diff -up ffmpeg-5.1/libpostproc/postprocess.c.flto_inline_asm~ ffmpeg-5.1/libpostproc/postprocess.c
--- ffmpeg-5.1/libpostproc/postprocess.c.flto_inline_asm~	2022-07-22 19:58:39.000000000 +0200
+++ ffmpeg-5.1/libpostproc/postprocess.c	2022-08-09 16:19:59.547808260 +0200
@@ -99,17 +99,17 @@ try to unroll inner for(x=0 ... loop to
 //#define NUM_BLOCKS_AT_ONCE 16 //not used yet
 
 #if ARCH_X86 && HAVE_INLINE_ASM
-DECLARE_ASM_CONST(8, uint64_t, w05)= 0x0005000500050005LL;
-DECLARE_ASM_CONST(8, uint64_t, w04)= 0x0004000400040004LL;
-DECLARE_ASM_CONST(8, uint64_t, w20)= 0x0020002000200020LL;
-DECLARE_ASM_CONST(8, uint64_t, b00)= 0x0000000000000000LL;
-DECLARE_ASM_CONST(8, uint64_t, b01)= 0x0101010101010101LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, w05)= 0x0005000500050005LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, w04)= 0x0004000400040004LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, w20)= 0x0020002000200020LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, b00)= 0x0000000000000000LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, b01)= 0x0101010101010101LL;
 DECLARE_ASM_CONST(8, uint64_t, b02)= 0x0202020202020202LL;
-DECLARE_ASM_CONST(8, uint64_t, b08)= 0x0808080808080808LL;
-DECLARE_ASM_CONST(8, uint64_t, b80)= 0x8080808080808080LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, b08)= 0x0808080808080808LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, b80)= 0x8080808080808080LL;
 #endif
 
-DECLARE_ASM_CONST(8, int, deringThreshold)= 20;
+DECLARE_ASM_CONST_VISIBLE(8, int, deringThreshold)= 20;
 
 
 static const struct PPFilter filters[]=
diff -up ffmpeg-5.1/libswscale/x86/rgb2rgb.c.flto_inline_asm~ ffmpeg-5.1/libswscale/x86/rgb2rgb.c
--- ffmpeg-5.1/libswscale/x86/rgb2rgb.c.flto_inline_asm~	2022-07-22 19:58:40.000000000 +0200
+++ ffmpeg-5.1/libswscale/x86/rgb2rgb.c	2022-08-09 16:19:59.547808260 +0200
@@ -38,7 +38,7 @@
 
 #if HAVE_INLINE_ASM
 
-DECLARE_ASM_CONST(8, uint64_t, mmx_ff)       = 0x00000000000000FFULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mmx_ff)       = 0x00000000000000FFULL;
 DECLARE_ASM_CONST(8, uint64_t, mmx_null)     = 0x0000000000000000ULL;
 DECLARE_ASM_CONST(8, uint64_t, mask32a)      = 0xFF000000FF000000ULL;
 DECLARE_ASM_CONST(8, uint64_t, mask3216br)   = 0x00F800F800F800F8ULL;
@@ -46,11 +46,11 @@ DECLARE_ASM_CONST(8, uint64_t, mask3216g
 DECLARE_ASM_CONST(8, uint64_t, mask3215g)    = 0x0000F8000000F800ULL;
 DECLARE_ASM_CONST(8, uint64_t, mul3216)      = 0x2000000420000004ULL;
 DECLARE_ASM_CONST(8, uint64_t, mul3215)      = 0x2000000820000008ULL;
-DECLARE_ASM_CONST(8, uint64_t, mask24b)      = 0x00FF0000FF0000FFULL;
-DECLARE_ASM_CONST(8, uint64_t, mask24g)      = 0xFF0000FF0000FF00ULL;
-DECLARE_ASM_CONST(8, uint64_t, mask24r)      = 0x0000FF0000FF0000ULL;
-DECLARE_ASM_CONST(8, uint64_t, mask24l)      = 0x0000000000FFFFFFULL;
-DECLARE_ASM_CONST(8, uint64_t, mask24h)      = 0x0000FFFFFF000000ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mask24b)      = 0x00FF0000FF0000FFULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mask24g)      = 0xFF0000FF0000FF00ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mask24r)      = 0x0000FF0000FF0000ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mask24l)      = 0x0000000000FFFFFFULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mask24h)      = 0x0000FFFFFF000000ULL;
 DECLARE_ASM_CONST(8, uint64_t, mask15b)      = 0x001F001F001F001FULL; /* 00000000 00011111  xxB */
 DECLARE_ASM_CONST(8, uint64_t, mask15rg)     = 0x7FE07FE07FE07FE0ULL; /* 01111111 11100000  RGx */
 DECLARE_ASM_CONST(8, uint64_t, mask15s)      = 0xFFE0FFE0FFE0FFE0ULL;
@@ -65,9 +65,9 @@ DECLARE_ASM_CONST(8, uint64_t, blue_16ma
 DECLARE_ASM_CONST(8, uint64_t, red_15mask)   = 0x00007c0000007c00ULL;
 DECLARE_ASM_CONST(8, uint64_t, green_15mask) = 0x000003e0000003e0ULL;
 DECLARE_ASM_CONST(8, uint64_t, blue_15mask)  = 0x0000001f0000001fULL;
-DECLARE_ASM_CONST(8, uint64_t, mul15_mid)    = 0x4200420042004200ULL;
-DECLARE_ASM_CONST(8, uint64_t, mul15_hi)     = 0x0210021002100210ULL;
-DECLARE_ASM_CONST(8, uint64_t, mul16_mid)    = 0x2080208020802080ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mul15_mid)    = 0x4200420042004200ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mul15_hi)     = 0x0210021002100210ULL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, mul16_mid)    = 0x2080208020802080ULL;
 
 DECLARE_ALIGNED(8, extern const uint64_t, ff_bgr2YOffset);
 DECLARE_ALIGNED(8, extern const uint64_t, ff_w1111);
diff -up ffmpeg-5.1/libswscale/x86/swscale.c.flto_inline_asm~ ffmpeg-5.1/libswscale/x86/swscale.c
--- ffmpeg-5.1/libswscale/x86/swscale.c.flto_inline_asm~	2022-08-09 16:19:59.548808235 +0200
+++ ffmpeg-5.1/libswscale/x86/swscale.c	2022-08-09 16:21:30.649494231 +0200
@@ -42,16 +42,16 @@ const DECLARE_ALIGNED(8, uint64_t, ff_di
 
 #define DITHER1XBPP
 
-DECLARE_ASM_CONST(8, uint64_t, bF8)=       0xF8F8F8F8F8F8F8F8LL;
-DECLARE_ASM_CONST(8, uint64_t, bFC)=       0xFCFCFCFCFCFCFCFCLL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, bF8)=       0xF8F8F8F8F8F8F8F8LL;
+DECLARE_ASM_CONST_VISIBLE(8, uint64_t, bFC)=       0xFCFCFCFCFCFCFCFCLL;
 
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_M24A)         = 0x00FF0000FF0000FFLL;
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_M24B)         = 0xFF0000FF0000FF00LL;
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_M24C)         = 0x0000FF0000FF0000LL;
-
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_bgr2YOffset)  = 0x1010101010101010ULL;
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_bgr2UVOffset) = 0x8080808080808080ULL;
-DECLARE_ASM_ALIGNED(8, const uint64_t, ff_w1111)        = 0x0001000100010001ULL;
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_M24A)         = 0x00FF0000FF0000FFLL;
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_M24B)         = 0xFF0000FF0000FF00LL;
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_M24C)         = 0x0000FF0000FF0000LL;
+
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_bgr2YOffset)  = 0x1010101010101010ULL;
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_bgr2UVOffset) = 0x8080808080808080ULL;
+DECLARE_ASM_ALIGNED(8, __attribute__ ((externally_visible)) const uint64_t, ff_w1111)        = 0x0001000100010001ULL;
 
 
 // MMXEXT versions
